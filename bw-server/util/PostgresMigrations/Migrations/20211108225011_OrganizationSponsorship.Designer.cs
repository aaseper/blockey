// <auto-generated />
using System;
using Bit.Infrastructure.EntityFramework.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Bit.PostgresMigrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211108225011_OrganizationSponsorship")]
    partial class OrganizationSponsorship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:postgresIndetermanisticCollation", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Cipher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Attachments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Favorites")
                        .HasColumnType("text");

                    b.Property<string>("Folders")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Reprompt")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Cipher");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.CollectionCipher", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CipherId")
                        .HasColumnType("uuid");

                    b.HasKey("CollectionId", "CipherId");

                    b.HasIndex("CipherId");

                    b.ToTable("CollectionCipher");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.CollectionGroup", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HidePasswords")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.HasKey("CollectionId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("CollectionGroups");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.CollectionUser", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HidePasswords")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CollectionId", "OrganizationUserId");

                    b.HasIndex("OrganizationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CollectionUsers");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Identifier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PushToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.EmergencyAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("GranteeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GrantorId")
                        .HasColumnType("uuid");

                    b.Property<string>("KeyEncrypted")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastNotificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RecoveryInitiatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("WaitTimeDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GranteeId");

                    b.HasIndex("GrantorId");

                    b.ToTable("EmergencyAccess");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActingUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CipherId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("DeviceType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PolicyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProviderOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProviderUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Grant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.ToTable("Grant");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("AccessAll")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.GroupUser", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId", "OrganizationUserId");

                    b.HasIndex("OrganizationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Installation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Installation");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("BillingEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("BusinessAddress1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BusinessAddress2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BusinessAddress3")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BusinessCountry")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BusinessTaxNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Gateway")
                        .HasColumnType("smallint");

                    b.Property<string>("GatewayCustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GatewaySubscriptionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Identifier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("postgresIndetermanisticCollation");

                    b.Property<string>("LicenseKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("MaxAutoscaleSeats")
                        .HasColumnType("integer");

                    b.Property<short?>("MaxCollections")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxStorageGb")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("OwnersNotifiedOfAutoscaling")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Plan")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte>("PlanType")
                        .HasColumnType("smallint");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceData")
                        .HasColumnType("text");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Seats")
                        .HasColumnType("integer");

                    b.Property<bool>("SelfHost")
                        .HasColumnType("boolean");

                    b.Property<long?>("Storage")
                        .HasColumnType("bigint");

                    b.Property<string>("TwoFactorProviders")
                        .HasColumnType("text");

                    b.Property<bool>("Use2fa")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseApi")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseDirectory")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseEvents")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseGroups")
                        .HasColumnType("boolean");

                    b.Property<bool>("UsePolicies")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseResetPassword")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseSso")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseTotp")
                        .HasColumnType("boolean");

                    b.Property<bool>("UsersGetPremium")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.OrganizationSponsorship", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("CloudSponsor")
                        .HasColumnType("boolean");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("InstallationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastSyncDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfferedToEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte?>("PlanSponsorshipType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SponsoredOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SponsoringOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SponsoringOrganizationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SponsorshipLapsedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("TimesRenewedWithoutValidation")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId");

                    b.HasIndex("SponsoredOrganizationId");

                    b.HasIndex("SponsoringOrganizationId");

                    b.ToTable("OrganizationSponsorship");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.OrganizationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("AccessAll")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("ResetPasswordKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationUser");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Provider.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("text");

                    b.Property<string>("BusinessAddress1")
                        .HasColumnType("text");

                    b.Property<string>("BusinessAddress2")
                        .HasColumnType("text");

                    b.Property<string>("BusinessAddress3")
                        .HasColumnType("text");

                    b.Property<string>("BusinessCountry")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<string>("BusinessTaxNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<bool>("UseEvents")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Provider.ProviderOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderOrganization");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Provider.ProviderUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("ProviderUser");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Send", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("HideEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int?>("MaxAccessCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Send");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.SsoConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("SsoConfig");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.SsoUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("postgresIndetermanisticCollation");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("SsoUser");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.TaxRate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.ToTable("TaxRate");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte?>("Gateway")
                        .HasColumnType("smallint");

                    b.Property<string>("GatewayId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("PaymentMethodType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Refunded")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("RefundedAmount")
                        .HasColumnType("numeric");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.U2f", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Challenge")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("KeyHandle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("U2f");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountRevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Culture")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .UseCollation("postgresIndetermanisticCollation");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("EquivalentDomains")
                        .HasColumnType("text");

                    b.Property<string>("ExcludedGlobalEquivalentDomains")
                        .HasColumnType("text");

                    b.Property<bool>("ForcePasswordReset")
                        .HasColumnType("boolean");

                    b.Property<byte?>("Gateway")
                        .HasColumnType("smallint");

                    b.Property<string>("GatewayCustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GatewaySubscriptionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte>("Kdf")
                        .HasColumnType("smallint");

                    b.Property<int>("KdfIterations")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("LicenseKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MasterPassword")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("MasterPasswordHint")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short?>("MaxStorageGb")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Premium")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PremiumExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RenewalReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("Storage")
                        .HasColumnType("bigint");

                    b.Property<string>("TwoFactorProviders")
                        .HasColumnType("text");

                    b.Property<string>("TwoFactorRecoveryCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("UsesCryptoAgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Cipher", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany("Ciphers")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany("Ciphers")
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Collection", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.CollectionCipher", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Cipher", "Cipher")
                        .WithMany("CollectionCiphers")
                        .HasForeignKey("CipherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.Collection", "Collection")
                        .WithMany("CollectionCiphers")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cipher");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.CollectionGroup", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Collection", "Collection")
                        .WithMany("CollectionGroups")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.CollectionUser", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Collection", "Collection")
                        .WithMany("CollectionUsers")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.OrganizationUser", "OrganizationUser")
                        .WithMany("CollectionUsers")
                        .HasForeignKey("OrganizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.User", null)
                        .WithMany("CollectionUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Collection");

                    b.Navigation("OrganizationUser");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Device", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.EmergencyAccess", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.User", "Grantee")
                        .WithMany()
                        .HasForeignKey("GranteeId");

                    b.HasOne("Bit.Core.Models.EntityFramework.User", "Grantor")
                        .WithMany()
                        .HasForeignKey("GrantorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grantee");

                    b.Navigation("Grantor");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Folder", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Group", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany("Groups")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.GroupUser", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.OrganizationUser", "OrganizationUser")
                        .WithMany()
                        .HasForeignKey("OrganizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.User", null)
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Group");

                    b.Navigation("OrganizationUser");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.OrganizationSponsorship", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Installation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId");

                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "SponsoredOrganization")
                        .WithMany()
                        .HasForeignKey("SponsoredOrganizationId");

                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "SponsoringOrganization")
                        .WithMany()
                        .HasForeignKey("SponsoringOrganizationId");

                    b.Navigation("Installation");

                    b.Navigation("SponsoredOrganization");

                    b.Navigation("SponsoringOrganization");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.OrganizationUser", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Policy", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany("Policies")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Provider.ProviderOrganization", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.Provider.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Provider.ProviderUser", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Provider.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Send", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.SsoConfig", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany("SsoConfigs")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.SsoUser", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany("SsoUsers")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany("SsoUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Transaction", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.Organization", "Organization")
                        .WithMany("Transactions")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.U2f", b =>
                {
                    b.HasOne("Bit.Core.Models.EntityFramework.User", "User")
                        .WithMany("U2fs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Cipher", b =>
                {
                    b.Navigation("CollectionCiphers");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Collection", b =>
                {
                    b.Navigation("CollectionCiphers");

                    b.Navigation("CollectionGroups");

                    b.Navigation("CollectionUsers");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Group", b =>
                {
                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.Organization", b =>
                {
                    b.Navigation("Ciphers");

                    b.Navigation("Groups");

                    b.Navigation("OrganizationUsers");

                    b.Navigation("Policies");

                    b.Navigation("SsoConfigs");

                    b.Navigation("SsoUsers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.OrganizationUser", b =>
                {
                    b.Navigation("CollectionUsers");
                });

            modelBuilder.Entity("Bit.Core.Models.EntityFramework.User", b =>
                {
                    b.Navigation("Ciphers");

                    b.Navigation("CollectionUsers");

                    b.Navigation("Folders");

                    b.Navigation("GroupUsers");

                    b.Navigation("OrganizationUsers");

                    b.Navigation("SsoUsers");

                    b.Navigation("Transactions");

                    b.Navigation("U2fs");
                });
#pragma warning restore 612, 618
        }
    }
}
